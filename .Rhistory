# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/pskahill/Desktop/Suspensions/money-data/scripts/outplacement_by_city')
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
View(df)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
p_load(ggplot2, dplyr, janitor)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("janitor")
install.packages("pacman")
p_load(ggplot2, dplyr, janitor)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
p_load(ggplot2, dplyr, janitor)
library(dplyr)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
)
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
View(total_by_year)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
View(df_with_total)
districts <- c("All", sort(unique(district)))
library(ggplot2)
library(dplyr)
district <-c("A","B","C","A","B", "C")
money <-c(500,324,245,654,234, 232)
year <- c("2001", "2001", "2001", "2002", "2002", "2002")
df <- data.frame(district, money, year, stringsAsFactors = FALSE)
total_by_year <- df %>%
group_by(year) %>%
summarize(
money = sum(money)
) %>%
mutate(
district = "All"
) %>%
ungroup()
df_with_total <- bind_rows(df, total_by_year)
districts <- c("All", sort(unique(district)))
# Define UI for application that draws a bar chart
ui <- fluidPage(
# Application title
titlePanel("School Expenditure by Year"),
# Dropdown
sidebarLayout(
sidebarPanel(
selectInput("mydistrict", "Select District", choices = districts, selected = "All", )
),
# Set a place to show a bar chart of spending
mainPanel(
plotOutput("distSpending")
)
)
)
# Define server logic required to draw the barchart
library(ggplot2)
server <- function(input, output) {
# filter data based on user input
my_graph_data <- reactive({
dplyr::filter(df_with_total, district == input$mydistrict)
})
# draw the bar chart
output$distSpending <- renderPlot({
ggplot(my_graph_data(), aes(x=year, y=money)) +
geom_bar(stat="identity", color = "black", fill="#0072B2") +
ggtitle(paste("District:", input$mydistrict)) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray")) +
scale_y_continuous(expand = c(0, 0))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("fst")
setwd("C:/Users/pskahill/Desktop/Suspensions/money-data/scripts/suspensions_final")
disability <- read.csv("disability-17-18.csv", header = T)
library(ggplot2)
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate))+
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray"),
axis.title.y=element_blank()+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education"))
library(dplyr)
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate))+
theme_minimal() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "gray"),
axis.title.y=element_blank()+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education"))
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="blue")+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")
chart_1
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="blue")+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability", face = "bold"
subtitle = "Source: CT Department of Education")
chart_1
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="blue")+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")+
theme(plot.title = element_text(face = "bold"))
chart_1
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="#0072B2")+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")+
theme(plot.title = element_text(face = "bold"))
chart_1
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="#0072B2")+
theme_minimal()+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")+
theme(plot.title = element_text(face = "bold"))
chart_1
chart_1 <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="#0072B2")+
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank())+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")+
theme(plot.title = element_text(face = "bold"))
chart_1
disability <- read.csv("disability-17-18.csv", header = T)
p <- disability %>%
ggplot()+
geom_col(stat= "identity",mapping = aes(x=reorder(Primary.Disability, -Suspension.Rate), y=Suspension.Rate), fill="#0072B2")+
theme_minimal()+
theme(panel.border = element_blank(), panel.grid.major = element_blank())+
labs(y = "Percentage")+
labs(x = "Disability Type")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.text.y = element_text(angle = 45, hjust = 1))+
labs(title = "Estimated Statewide Suspension Rate for Students with Disabilities By Primary Disability",
subtitle = "Source: CT Department of Education")+
theme(plot.title = element_text(face = "bold"))
p
p
